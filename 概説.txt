LotusRoot概説

LotusRootは音高、持続などのデータ配列から楽譜断片を作成するRubyプログラムである。
具体的には、オープンソースの記譜ソフトLilyPondのための記譜スクリプトを作成する。


## 必要ソフトウェア

LotusRootによる楽譜の作成にはRuby（2.2以降）とLilyPond（2.18.2以降）のインストールが必要である。
また、必須ではないがLilyPond用エディタFrescobaldiのインストールを推奨する。

Ruby	https://ruby-lang.org
LilyPond	http://lilypond.org
Frescobaldi	http://frescobaldi.org


## 使用条件

LotusRootはMITライセンスにより公開される。詳細はLICENSE.txtを参照。
日本語訳 https://osdn.jp/projects/opensource/wiki/licenses%2FMIT_license


## 使用例

コマンドプロンプトから以下を実行する（Windowsの場合）。
cd <path>\LotusRoot
ruby test_mess.rb
lilypond test.ly


## 使用方法

以下、サンプルファイルに沿って説明する。詳細についてはREADME.txtを参照。


# 00_input.rb

プログラム使用にはLotusRoot.rbをロードする。
require_relative 'bin/LotusRoot'

LotusRootへ入力される基本データは次の4種である。

Durations　持続
Elements　音符や休符、持続などを表す記号
Tuplets　連符
Pitches　音高

Elementsは文字列の配列で書かれ、その他は整数、小数、有理数など数値の配列で書かれる。
Elements以外の配列は繰り返し参照される。そのため配列の要素数が1でも機能する（同じ内容の繰り返しになる）。
Elementsは省略することが出来ない。言い換えればElementsの数に応じて音符が配置される。

ここでは、Elementsが主に次の3種からなることを示している。

"@"　音符の立ち上がり
"="　音符の持続
"r!"　休符

例えばこの記譜における最初の音符は、1つの立ち上がりと13の持続によって表される。
Durationsは、具体的には各Elementの長さを意味する。ここでは全Elementsが長さ1なので、この記譜の最初の音符は合計で長さ14の持続となる。
Tupletsは整数の場合、4分音符の分割数を表す。従ってこの記譜の最小音価は16分音符である。
よってこの記譜の最初の音符は、16分音符14個分の持続となる。

"@"にはLilyPondコマンドを含めることが出来る。例えば"@\\trill"と記述することでLilyPondの音符表記の後に「\trill」を付加できる。
\記号を表現する為にエスケープ記号の\が必要であることに注意。

sco = Score.new(dur, elm, tpl, pch)
この行はScoreオブジェクトの作成とデータ入力を行なう。
基本データの変数名は何でもよいが、仮にdur, elm, tpl, pchとする。

sco.gen
この行は記譜スクリプトの生成を行なう。

sco.export("sco.txt")
この行は記譜スクリプトをテキストファイルに出力する。

出力されたファイルはtest.lyの次の行で読み込む。
\include "sco.txt"
これらのファイル名が一致していればファイル名は何でもよい。

sco.print
この行はコマンドプロンプトに記譜スクリプトを表示する。

その他の行は記譜スクリプトを調整するためのオプションである。詳細は後述。


# 01_input.rb

00_input.rbと同じ記譜内容だがElementsとDurationsが異なる。

elm = ["@"]
dur = [3]

このデータを入力した場合、LotusRootはこれを以下のように展開する。

=> elm = ["@", "=", "="]


# 02_pitch.rb

Pitchesは整数によって半音階を表し、小数または有理数で4分音または8分音を表す。
和音の記述には配列を用いる。

以後、#でコメントアウトされた行を1つずつコメント解除しながら実行してみる。

ここで用いられたRuby記法について説明する。

[*0..11]は範囲(Range)オブジェクトを配列に変換する。

mapメソッドは配列の内容を変換する。以下は配列arrayの各要素itemに対してblockを実行する。
array.map{|item| block }

以下はpchの実際の内容をコマンドプロンプトに表示する。
p pch

以下はpchに対するmapだが、pchの要素数と同じ回数"@"を繰り返すためだけで、pchの内容は無視している。
elm = pch.map{"@"}

次にLotusRootのオプションについて説明する。
pitchShiftオプションは入力されたPitches全体に指定の数値を加算する。つまり音符の移高となる。
accModeオプションはは臨時記号を選択する。0は（微分音を含め）シャープ系、1はフラット系で統一される。
2と3はそれぞれシャープ系とフラット系から3/4音表記を除く。


# 03_duration.rb

Durationsは、具体的にはTupletsで定義される最小音価の何個分であるかによって、持続を定義する。
従ってDurationsの値が同じでも連符によって結果が異なる。

この場合、Durationsは[2, 1, 1]を繰り返している。
Durationsを[3, 1]に変更すると、第2小節1拍目は最小音価1/3の3個分で4分音符となる。
尚、LotusRoot内部では全ての音価は有理数として処理される。


# 04_element.rb

ここではランダムな持続に対して"r!"と"@"のいずれかをランダムに当てはめている。
ElementsにはLilyPondコマンドを含めることが出来るが、"r!"に含めた場合は休符が分割される。

elm = elm.zip(dur).map{|e,d| e+"^\\markup{#{d}}"}
この行はDurationsの値を音符の上にマークアップする方法を示している。#{}は文字列の中で変数を評価するRuby記法である。

"TMP4;120;"はテンポ記号を挿入するLotusRootのコマンドである。


# 05_metre.rb

拍子はmetreオプションに対する配列で指定できる。
整数で記述した場合は分母が4分音符となる。
[[beat], unit]の形で記述した場合はbeatが分子、unitが分母となる。
beatは整数の配列であり、1つの整数でもよいが、明示的に拍構造を記述することもできる。
unitは4分音符を1とした整数または有理数である。1/2rはRuby記法で1/2を意味し、ここでは8分音符を意味する。


# 06_tuplet.rb

=begin、=endは複数行コメントの記法であり、各行をコメントアウトすることでコメントを無効化できる。

Tupletsを整数の配列で記述すると、拍の分割数で連符を定義する。
簡略化された連符の定義だが、metreで定義される拍子によって挙動が変わる。

拍は基本的に4分音符だが、1小節が4分音符で割り切れない場合、
- 連符側が分割できる場合は分割した連符で小節を充填する(tpl = [6])
- 連符側が分割できない場合は小節全体を等分する(tpl = [5])
これは音価を変えず処理に整合性を持たせるためであり、ここでtpl = [4]とした場合はどの小節も16分音符単位で表記される。

明示的に拍構造が指定された小節に対しては、拍構造に従って拍を分割する。

明示的に連符を指定するには[n, d, u]の形で記述する。
この場合、nは分子（拍の分割数）、dは分母（拍の長さ＝nの個数）、nは単位音価である。


# 07_altNoteName.rb

altNoteNameオプションはPitchesの値に対して直接音名を指定する。主に臨時記号の指定に用いる。
この場合、altNoteNameの値はpitchShiftオプションによる変更後のPitchesに対する指定となるので注意を要する。
音高の指定が0~11の場合は全てのオクターブに適用される。
12以上の値を含むと複数オクターブの繰り返しとなる。


# 08_tidyTuplet.rb

LotusRootのデフォルトの出力では連符が非常に読みにくい場合がある。
tidyTupletオプションは連符のグルーピングにより表記の正常化を試みる。