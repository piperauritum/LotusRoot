LotusRoot概説
池田 (2018-02-17)

LotusRootは音高、持続などのデータ配列から楽譜断片を作成するRubyプログラムである。
具体的には、オープンソースの記譜ソフトLilyPondのための記譜スクリプトを作成する。


## 必要ソフトウェア

LotusRootによる楽譜の作成にはRuby（2.2以降）とLilyPond（2.18.2以降）のインストールが必要である。
また、必須ではないがLilyPond用エディタFrescobaldiのインストールを推奨する。

Ruby		https://ruby-lang.org
LilyPond	http://lilypond.org
Frescobaldi	http://frescobaldi.org


## 使用条件

LotusRootはMITライセンスにより公開される。詳細はLICENSE.txtを参照。
日本語訳	https://osdn.jp/projects/opensource/wiki/licenses%2FMIT_license


## 使用例

コマンドプロンプトから以下を実行する（Windowsの場合）。

cd <path>\LotusRoot
ruby test_mess.rb
lilypond test.ly

## 使用方法

以下、サンプルファイルに沿って説明する。全ての機能についてはREADME.txtを参照。


# 00_input.rb

プログラム使用にはLotusRoot.rbをロードする。

require_relative 'bin/LotusRoot'

LotusRootへ渡される基本データは次の4種である。

Durations	持続
Elements	音符や休符、持続などを表す記号
Tuplets	連符
Pitches		音高

Elementsは文字列の配列で書かれ、その他は整数、小数、有理数など数値の配列で書かれる。
Elements以外の配列は繰り返し参照される。そのため配列の要素数が1でも機能する（同じ内容の繰り返しになる）。
Elementsは省略することが出来ない。言い換えればElementsの数に応じて音符が配置される。

ここでは、Elementsが主に次の3種からなることを示している。

"@"	音符の立ち上がり
"="	音符の持続
"r!"	休符

例えばこの記譜における最初の音符は、1つの立ち上がりと13の持続によって記述される。
Durationsは、具体的には各Elementの長さを意味する。ここでは全てのElementsが長さ1なので、この記譜の最初の音符は合計で長さ14の持続となる。
Tupletsは整数の場合、4分音符の分割数を表す。従ってこの記譜の最小音価は16分音符であり、この記譜の最初の音符は、16分音符14個分の持続となる。

"@"と"r!"にはLilyPondコマンドを含めることが出来る。例えば"@\\trill"と記述することでLilyPondの音符表記の後に「\trill」を付加できる。\記号を表現する為、さらにエスケープ記号の\が必要であることに注意。

sco = Score.new(dur, elm, tpl, pch)

この行はScoreオブジェクトの作成とデータ入力を行なう。
基本データの配列名は何でもよいが、仮にdur, elm, tpl, pchとする。

sco.gen

この行は記譜スクリプトの生成を行なう。

sco.export("sco.txt")

この行は記譜スクリプトをテキストファイルに出力する。

出力されたファイルはtest.lyの次の行で読み込む。

\include "sco.txt"

これらのファイル名が一致していればファイル名は何でもよい。

sco.print

この行はコマンドプロンプトに記譜スクリプトを表示する。

その他の行は記譜スクリプトを調整するためのオプションである。詳細は後述。


# 01_input.rb

00_input.rbと同じ記譜内容だがElementsとDurationsが異なる。

elm = ["@"]
dur = [3]

このデータを入力した場合、LotusRootはこれを内部で以下のように展開する。

#=> elm = ["@", "=", "="]


# 02_pitch.rb

Pitchesは整数によって半音階を表し、小数または有理数で4分音または8分音を表す。
和音の記述には配列を用いる。

以後、#でコメントアウトされた行を1つずつコメント解除しながら実行してみる。

ここで用いられたRuby記法について説明する。

[*0..11]は範囲オブジェクトを配列に変換する。

mapメソッドは配列の内容を変換する。書式は次の通り。配列arrayの各要素itemに対してblockを実行する。

array.map{|item| block }

以下はpchの実際の内容をコマンドプロンプトに表示する。

p pch

以下はpchに対するmapだが、pchの要素数と同じ回数"@"を繰り返すためだけで、pchの内容は無視している。

elm = pch.map{"@"}

次にLotusRootのオプションについて説明する。
pitchShiftオプションは入力されたPitches全体に指定の数値を加算する、つまり移高を行なう。
accModeオプションは臨時記号の種類を選択する。0は（微分音を含め）シャープ系、1はフラット系で統一される。
2と3はそれぞれシャープ系とフラット系から3/4音表記を除く。


# 03_duration.rb

Durationsは、具体的にはTupletsで定義される最小音価の何個分であるかによって、持続を定義する。
Durationsの値が同じでも連符によって結果が異なる。この場合、Durationsは[2, 1, 1]を繰り返している。

Durationsを[3, 1]に変更すると、第2小節1拍目は最小音価1/3の3個分で4分音符となる。
尚、LotusRoot内部では全ての音価は有理数として処理される。


# 04_element.rb

ここではランダムな持続に対して"r!"と"@"のいずれかをランダムに当てはめている。
ElementsにはLilyPondコマンドを付記できる。

elm = elm.zip(dur).map{|e,d| e+"^\\markup{#{d}}"}
この行はDurationsの値を音符の上にマークアップする方法を示している。#{}は文字列の中で変数を評価するRuby記法である。

"TMP4;120;"はテンポ記号を挿入するLotusRootのコマンドである。


# 05_metre.rb

拍子はデフォルトで4/4であるが、metreオプションで指定できる。配列で記述し（Tuplets等と同様に）繰り返し参照される。
配列の要素を整数nで記述した場合は、n/4拍子として解釈する。
[[beat], unit]の形で記述した場合はbeatが分子、unitが分母となる。
beatは整数の配列であり、1つの整数でもよいが、整数の組み合わせで明示的に拍構造を記述することもできる。
unitは4分音符を1とした整数または有理数である。1/2rはRuby記法で1/2を意味し、この場合は8分音符を意味する。


# 06_tuplet.rb

=begin、=endは複数行コメントのRuby記法であり、各行を次のようにコメントアウトすることでコメントを無効化できる。

# =begin
（この部分が実行される）
# =end

Tupletsを整数の配列で記述すると、拍の分割数で連符を定義する。この場合、metreで定義される拍子によって挙動が変わる。

拍は基本的に4分音符だが、ある小節が4分音符で割り切れない場合、
・ 連符側が分割できる場合は分割した連符で小節を充填する(tpl = [6])
・ 連符側が分割できない場合は小節全体を等分する(tpl = [5])
これは音価を変えず処理に整合性を持たせるためである。tpl = [4]とした場合はどの小節も16分音符単位で表記される。

明示的に拍構造が指定された小節に対しては、拍構造に従って拍を分割する。

明示的に連符を指定するには[n, d, u]の形で記述する。
この場合、nは分子（拍の分割数）、dは分母（拍の長さ＝nの個数）、uは4分音符を1とした単位音価である。

fracTupletオプションは連符を比率表記にする。
finalBarオプションは指定された小節数で記譜スクリプトを打ち切る。


# 07_altNoteName.rb

altNoteNameオプションはPitchesの値に対して直接音名を指定する。主に臨時記号の指定に用いる。
この場合、altNoteNameの値はpitchShiftオプションによる変更後のPitchesに対する指定となるので注意を要する。
音高の指定が0~11の場合は全てのオクターブに適用される。12以上の値を含むと複数オクターブの繰り返しとなる。


# 08_tidyTuplet.rb

LotusRootのデフォルトの出力では連符が非常に読みにくい場合がある。
tidyTupletオプションは連符のグルーピングにより譜割の可読性の向上を試みる。
※現状では6連符と32分音符にのみ対応。


# 09_tiednotes.rb

タイで連結された全ての音符に対してマークアップを行なうには"@="を用いる。
"#A"と"A#"で囲まれたコマンドはタイで連結された音符の先頭に適用される。
"#Z"と"Z#"で囲まれたコマンドはタイで連結された音符の末尾に適用される。
尚、"#A..A#"と"#Z..Z#"は"@="以外のElementsでは正常に機能しない。


# 10_autoChordAcc.rb

autoChordAcc = 0とすることで、和音毎に臨時記号の種類を自動的に選択する。
シャープとフラットのいずれかに統一し、混在は行なわない。


# 11_reptChordAcc.rb

臨時記号の付け方について、LilyPondでは\accidentalStyleで設定を行なうが（config.lyを参照）、和音については別途工夫を要する。
reptChordAcc = 0の場合、前後の和音で連続している音高に臨時記号を付する。
reptChordAcc = 1の場合、同じ和音の連続については上記の処理を省略する。


# 12_artharm.rb

この例ではtextReplaceを用いてテキスト置換を行い、人工ハーモニクスを書く方法を示している。
正規表現を含むテキスト置換の書式はRubyのgsubメソッドと同じである。
autoChordAcc = 1とすることで、二和音の度数を揃える。


# 13_rest.rb

"r!"または"s!"は自動的に結合される（但し、後続のElementsにLilyPondコマンド等が含まれない場合）。
Tupletsを配列で記述した場合、休符は連符毎に分割される。
metreで拍構造を明示的に指定した場合も、休符は拍構造に従って分割される。
omitRestオプションは、指定した音価の休符を排除する。同じ音符表記でも音価が変わることに注意（3連符の中の4分音符の音価は2/3となる）。
wholeBarRestオプションは、小節単位の全休符（LilyPondでは大文字のRで記述）を使用する。
尚、小節単位の全休符の場合、LilyPondでは\fermataの代わりに\fermataMarkupを用いる。


# 14_misc.rb

dotDupletオプションは、3拍2連符を付点音符に書き換える。
beamOverRestオプションは、連符毎に休符を跨いで連桁を書く。
namedMusicオプションは、記譜スクリプトの変数名を指定する（以降はtest.lyではエラーになる）。
noMusBracketオプションは、括弧{　}なしの記譜スクリプトのみを出力する。